#ifndef __GTL_TRIGONOMETRIC_LIB__
#define __GTL_TRIGONOMETRIC_LIB__

//	简单角度函数、包括cos、tan，所有函数都基于整数运算，精度Q15
//	一、角度取值范围
//		0 ～ PI / 2.0 ---> 0 ～ 32K
//		0 ～ PI * 2.0 ---> 0 ～ 32K * 4
//	二、函数取值范围，如cos、sin返回值
//		0 ～ 1.0      ---> 0 ～ 32K

#include "DEF.hpp"
#include "Math.hpp"

namespace GTL
{

template <class TYPE> TYPE defcos(TYPE X);					// err.max = 8.0860E-5, avg = 2.3292E-5 // X 必须取值0 ～ 32K
template <class TYPE> TYPE defsin(TYPE X);					// ...
template <class TYPE> TYPE intcos(TYPE X);					// ...
template <class TYPE> TYPE intsin(TYPE X);					// ...
template <class TYPE> TYPE cossin(TYPE X, TYPE &C, TYPE &S);
template <class TYPE> TYPE inttan(TYPE X);

template <class TYPE> TYPE arccos(TYPE X);					// err.max = 3.3847E-4, avg = 7.9167E-5
template <class TYPE> TYPE arcsin(TYPE X);					// ...
template <class TYPE> TYPE arctan(TYPE X, TYPE Y);			// err.max = 6.4325E-5, avg = 1.6291E-5


/////////////////////////////////////////////////////////////////////////////
//
// trigonometric function
//
/////////////////////////////////////////////////////////////////////////////

#define TRIGONOMETRIC_BITS 15
#define TRIGONOMETRIC_MAXS 0x08000
#define TRIGONOMETRIC_MASK 0x07FFF
#define TRIGONOMETRIC_QUAD 0x18000

#define TRIGONOREGION_BITS 9
#define TRIGONOREGION_MAXS 0x00200
#define TRIGONOREGION_MASK 0x001FF

template <class TYPE> TYPE defcos(TYPE X)
{
#if defined _DEBUG || defined DEBUG
	if (X <= 0) return TRIGONOMETRIC_MAXS;
	if (X >= TRIGONOMETRIC_MAXS) return 0;
#endif

	static const WORD data[] =
	{
		0x8000, 0x7FF6, 0x7FD9, 0x7FA7, 0x7F62, 0x7F0A, 0x7E9D, 0x7E1E,
		0x7D8A, 0x7CE4, 0x7C2A, 0x7B5D, 0x7A7D, 0x798A, 0x7885, 0x776C,
		0x7642, 0x7505, 0x73B6, 0x7255, 0x70E3, 0x6F5F, 0x6DCA, 0x6C24,
		0x6A6E, 0x68A7, 0x66D0, 0x64E9, 0x62F2, 0x60EC, 0x5ED7, 0x5CB4,
		0x5A82, 0x5843, 0x55F6, 0x539B, 0x5134, 0x4EC0, 0x4C40, 0x49B4,
		0x471D, 0x447B, 0x41CE, 0x3F17, 0x3C57, 0x398D, 0x36BA, 0x33DF,
		0x30FC, 0x2E11, 0x2B1F, 0x2827, 0x2528, 0x2224, 0x1F1A, 0x1C0C,
		0x18F9, 0x15E2, 0x12C8, 0x0FAB, 0x0C8C, 0x096B, 0x0648, 0x0324,
		0x0000
		// err.max = 8.0860E-5, avg = 2.3292E-5
	};
	TYPE i = (TYPE)(X >> TRIGONOREGION_BITS);
	TYPE e = (TYPE)(X &  TRIGONOREGION_MASK);
	TYPE a = (TYPE)(data[i    ]);
	TYPE b = (TYPE)(data[i + 1]);

	return a - (((a - b) * e) >> TRIGONOREGION_BITS);
}

template <class TYPE> inline TYPE defsin(TYPE X)
{
	return defcos(TRIGONOMETRIC_MAXS - X);
}

template <class TYPE> TYPE intcos(TYPE X)
{
	TYPE f = X & TRIGONOMETRIC_MASK;
	TYPE i = X & TRIGONOMETRIC_QUAD;
	switch(i)
	{
	case 0x00000: return  defcos(f);
	case 0x08000: return -defsin(f);
	case 0x10000: return -defcos(f);
	case 0x18000: return  defsin(f);
	}
	return 0;
}

template <class TYPE> TYPE intsin(TYPE X)
{
	TYPE f = X & TRIGONOMETRIC_MASK;
	TYPE i = X & TRIGONOMETRIC_QUAD;
	switch(i)
	{
	case 0x00000: return  defsin(f);
	case 0x08000: return  defcos(f);
	case 0x10000: return -defsin(f);
	case 0x18000: return -defcos(f);
	}
	return 0;
}

template <class TYPE> TYPE cossin(TYPE X, TYPE &C, TYPE &S)
{
	TYPE f = X & TRIGONOMETRIC_MASK;
	TYPE i = X & TRIGONOMETRIC_QUAD;
	switch(i)
	{
	case 0x00000: C = defcos(f); S = defsin(f); break;
	case 0x08000: C =-defsin(f); S = defcos(f); break;
	case 0x10000: C =-defcos(f); S =-defsin(f); break;
	case 0x18000: C = defsin(f); S =-defcos(f); break;
	}
	return 0;
}

template <class TYPE> TYPE inttan(TYPE X)
{
	return 0;
}

template <class TYPE> TYPE arccos(TYPE X)
{
	if (X <= 0) return TRIGONOMETRIC_MAXS;
	if (X >= TRIGONOMETRIC_MAXS) return 0;

#if 0
	static const WORD data[] =
	{
		0x0000, 0x00A3, 0x00E6, 0x011A, 0x0146, 0x016C, 0x018F, 0x01AF,
		0x01CD, 0x01E9, 0x0203, 0x021D, 0x0235, 0x024C, 0x0262, 0x0277,
		0x028C, 0x02A0, 0x02B3, 0x02C6, 0x02D9, 0x02EB, 0x02FC, 0x030E,
		0x031E, 0x032F, 0x033F, 0x034F, 0x035E, 0x036E, 0x037D, 0x038B,
		0x039A, 0x03B6, 0x03D2, 0x03ED, 0x0407, 0x0420, 0x0439, 0x0451,
		0x0469, 0x0481, 0x0497, 0x04AE, 0x04C4, 0x04D9, 0x04EF, 0x0503,
		0x0518, 0x0540, 0x0567, 0x058D, 0x05B2, 0x05D6, 0x05F9, 0x061C,
		0x063D, 0x065E, 0x067E, 0x069E, 0x06BD, 0x06DC, 0x06FA, 0x0717,
		0x0734, 0x076D, 0x07A4, 0x07DA, 0x080E, 0x0841, 0x0873, 0x08A4,
		0x08D3, 0x0902, 0x0930, 0x095D, 0x0989, 0x09B4, 0x09DE, 0x0A08,
		0x0A31, 0x0A82, 0x0AD0, 0x0B1C, 0x0B66, 0x0BAE, 0x0BF4, 0x0C39,
		0x0C7D, 0x0CBF, 0x0D00, 0x0D3F, 0x0D7D, 0x0DBB, 0x0DF7, 0x0E32,
		0x0E6D, 0x0EDE, 0x0F4D, 0x0FB9, 0x1022, 0x1088, 0x10EC, 0x114E,
		0x11AD, 0x120B, 0x1267, 0x12C1, 0x131A, 0x1371, 0x13C6, 0x141A,
		0x146D, 0x150F, 0x15AC, 0x1645, 0x16DA, 0x176B, 0x17F9, 0x1884,
		0x190C, 0x1992, 0x1A15, 0x1A95, 0x1B13, 0x1B8F, 0x1C09, 0x1C80,
		0x1CF6, 0x1DDD, 0x1EBD, 0x1F98, 0x206D, 0x213C, 0x2208, 0x22CE,
		0x2391, 0x2450, 0x250B, 0x25C3, 0x2678, 0x272A, 0x27D8, 0x2885,
		0x292E, 0x2A7A, 0x2BBD, 0x2CF8, 0x2E2B, 0x2F57, 0x307D, 0x319D,
		0x32B7, 0x33CC, 0x34DC, 0x35E8, 0x36EF, 0x37F2, 0x38F1, 0x39ED,
		0x3AE5, 0x3CCB, 0x3EA6, 0x4075, 0x423B, 0x43F7, 0x45AB, 0x4757,
		0x48FC, 0x4A9B, 0x4C33, 0x4DC5, 0x4F52, 0x50D9, 0x525C, 0x53DB,
		0x5555, 0x583F, 0x5B1A, 0x5DE9, 0x60AD, 0x6368, 0x661A, 0x68C5,
		0x6B69, 0x6E08, 0x70A1, 0x7337, 0x75CA, 0x7859, 0x7AE7, 0x7D74,
		0x8000
		// err.max = 8.6218E-5, avg = 1.9561E-5
	};
	#define TRIGONOMETRIC_GRID 4
#else
	static const WORD data[] =
	{
		0x0000, 0x00A3, 0x00E6, 0x011A, 0x0146, 0x016C, 0x018F, 0x01AF,
		0x01CD, 0x01E9, 0x0203, 0x021D, 0x0235, 0x024C, 0x0262, 0x0277,
		0x028C, 0x02B3, 0x02D9, 0x02FC, 0x031E, 0x033F, 0x035E, 0x037D,
		0x039A, 0x03D2, 0x0407, 0x0439, 0x0469, 0x0497, 0x04C4, 0x04EF,
		0x0518, 0x0567, 0x05B2, 0x05F9, 0x063D, 0x067E, 0x06BD, 0x06FA,
		0x0734, 0x07A4, 0x080E, 0x0873, 0x08D3, 0x0930, 0x0989, 0x09DE,
		0x0A31, 0x0AD0, 0x0B66, 0x0BF4, 0x0C7D, 0x0D00, 0x0D7D, 0x0DF7,
		0x0E6D, 0x0F4D, 0x1022, 0x10EC, 0x11AD, 0x1267, 0x131A, 0x13C6,
		0x146D, 0x15AC, 0x16DA, 0x17F9, 0x190C, 0x1A15, 0x1B13, 0x1C09,
		0x1CF6, 0x1EBD, 0x206D, 0x2208, 0x2391, 0x250B, 0x2678, 0x27D8,
		0x292E, 0x2BBD, 0x2E2B, 0x307D, 0x32B7, 0x34DC, 0x36EF, 0x38F1,
		0x3AE5, 0x3EA6, 0x423B, 0x45AB, 0x48FC, 0x4C33, 0x4F52, 0x525C,
		0x5555, 0x5B1A, 0x60AD, 0x661A, 0x6B69, 0x70A1, 0x75CA, 0x7AE7,
		0x8000
		// err.max = 3.3847E-4, avg = 7.9167E-5
	};
	#define TRIGONOMETRIC_GRID 3
#endif
	TYPE vals = TRIGONOMETRIC_MAXS - X;
	long bits = bitsofp2(vals);

	if (bits > TRIGONOMETRIC_GRID)
	{
		vals = vals & ~(1 << (bits - 1));
		bits = bits - TRIGONOMETRIC_GRID;
	}
	else
	{
		bits = 0;
	}

	TYPE base = bits << TRIGONOMETRIC_GRID;
	if (bits)
		bits--;
	TYPE mask = ~(~0 << bits);

	TYPE i = (TYPE)(vals >> bits) + base;
	TYPE e = (TYPE)(vals &  mask);
	TYPE a = (TYPE)(data[i    ]);
	TYPE b = (TYPE)(data[i + 1]);

	return a - (((a - b) * e) >> bits);
}

template <class TYPE> inline TYPE arcsin(TYPE X)
{
	return TRIGONOMETRIC_MAXS - arccos(X);
}

template <class TYPE> TYPE arctan(TYPE X, TYPE Y)
{
	if (Y == 0) return X < 0 ? TRIGONOMETRIC_MAXS * 2 : 0;
	if (X == 0) return Y < 0 ? TRIGONOMETRIC_MAXS * 3 : TRIGONOMETRIC_MAXS;

	TYPE h = X < 0 ? -X : X;
	TYPE v = Y < 0 ? -Y : Y;
	TYPE w = v < h ? (v << TRIGONOMETRIC_BITS) / h : (h << TRIGONOMETRIC_BITS) / v;

	static const WORD data[] =
	{
		0x0000, 0x0146, 0x028C, 0x03D1, 0x0516, 0x065A, 0x079E, 0x08E1,
		0x0A22, 0x0B62, 0x0CA1, 0x0DDF, 0x0F1A, 0x1054, 0x118D, 0x12C3,
		0x13F6, 0x1528, 0x1657, 0x1784, 0x18AE, 0x19D6, 0x1AFB, 0x1C1D,
		0x1D3C, 0x1E59, 0x1F72, 0x2088, 0x219B, 0x22AB, 0x23B8, 0x24C2,
		0x25C8, 0x26CB, 0x27CB, 0x28C8, 0x29C1, 0x2AB7, 0x2BA9, 0x2C99,
		0x2D85, 0x2E6E, 0x2F53, 0x3035, 0x3114, 0x31F0, 0x32C8, 0x339E,
		0x3470, 0x353F, 0x360B, 0x36D4, 0x379A, 0x385C, 0x391C, 0x39D9,
		0x3A93, 0x3B4B, 0x3BFF, 0x3CB0, 0x3D5F, 0x3E0B, 0x3EB5, 0x3F5C,
		0x4000
		// err.max = 6.4325E-5, avg = 1.6291E-5
	};
	TYPE i = (TYPE)(w >> TRIGONOREGION_BITS);
	TYPE e = (TYPE)(w &  TRIGONOREGION_MASK);
	TYPE a = (TYPE)(data[i    ]);
	TYPE b = (TYPE)(data[i + 1]);

	w = a - (((a - b) * e) >> TRIGONOREGION_BITS);

	if (v > h) w = TRIGONOMETRIC_MAXS - w;

	if (X > 0 && Y > 0)
		return w;
	if (X < 0 && Y > 0)
		return TRIGONOMETRIC_MAXS * 2 - w;
	if (X < 0 && Y < 0)
		return TRIGONOMETRIC_MAXS * 2 + w;

		return TRIGONOMETRIC_MAXS * 4 - w;
}

/////////////////////////////////////////////////////////////////////////////
//
// trigonometric function end
//
/////////////////////////////////////////////////////////////////////////////

}

#endif
